type: edu
custom_name: stage3
files:
- name: src/blockchain/Main.java
  visible: true
  text: |+
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;
    import java.util.Scanner;
    import java.util.concurrent.ThreadLocalRandom;

    class Block {
        private final Long id;
        private final Long timestamp;
        private final String previousBlockHash;
        private int magicNumber;
        private int generatingTimeInSeconds;

        public Block(Long id, Long timestamp, String previousBlockHash) {
            this.id = id;
            this.timestamp = timestamp;
            this.previousBlockHash = previousBlockHash;
        }

        public Long getId() {
            return id;
        }

        public Long getTimestamp() {
            return timestamp;
        }

        public String getPreviousBlockHash() {
            return previousBlockHash;
        }

        public int getMagicNumber() {
            return magicNumber;
        }

        public void setMagicNumber(int magicNumber) {
            this.magicNumber = magicNumber;
        }

        public int getGeneratingTimeInSeconds() {
            return generatingTimeInSeconds;
        }

        public void setGeneratingTimeInSeconds(int generatingTimeInSeconds) {
            this.generatingTimeInSeconds = generatingTimeInSeconds;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("Block:\n");
            sb.append("Id: ");
            sb.append(id);
            sb.append("\n");
            sb.append("Timestamp: ");
            sb.append(timestamp);
            sb.append("\n");
            sb.append("Magic number: ");
            sb.append(magicNumber);
            sb.append("\n");
            sb.append("Hash of the previous block: \n");
            sb.append(previousBlockHash);
            sb.append("\n");
            sb.append("Hash of the block: \n");
            sb.append(StringUtil.applySha256(this));
            sb.append("\n");
            sb.append("lock was generating for ");
            sb.append(generatingTimeInSeconds);
            sb.append(" seconds");
            sb.append("\n");

            return sb.toString();
        }
    }

    class Blockchain {
        private List<Block> blockchain = new ArrayList<>();
        private int zerosCountInStart;

        public Blockchain(int zerosCountInStart) {
            this.zerosCountInStart = zerosCountInStart;
        }

        public Block getFirstBlock() {
            return blockchain.get(0);
        }

        public List<Block> getBlockchain() {
            return new ArrayList<>(blockchain);
        }

        public Block addBlock() {
            long startTime = System.currentTimeMillis();
            String prevHash = "0";
            if (!blockchain.isEmpty()) {
                prevHash = StringUtil.applySha256(blockchain.get(blockchain.size() - 1));
            }
            String zerosStandard = new String(new char[zerosCountInStart]).replaceAll("\0", "0");

            String zerosPart;
            int magicNumber;
            Block block = new Block((long) blockchain.size(), new Date().getTime(), prevHash);
            do {
                magicNumber = ThreadLocalRandom.current().nextInt();
                block.setMagicNumber(magicNumber);
                zerosPart = StringUtil.applySha256(block).substring(0, zerosCountInStart);
            } while (!zerosStandard.equals(zerosPart));
            long endTime = System.currentTimeMillis();
            int duration = (int) ((endTime - startTime) / 1000);
            block.setGeneratingTimeInSeconds(duration);
            blockchain.add(block);
            return block;
        }

        public boolean isBlockchainValid() {
            if (blockchain.isEmpty()) {
                return true;
            }
            if (!blockchain.get(0).getPreviousBlockHash().equals("0")) {
                return false;
            }
            if (blockchain.size() == 1) {
                return true;
            }
            for (int i = 0; i < blockchain.size() - 1; i++) {
                if (!StringUtil.applySha256(blockchain.get(i)).equals(blockchain.get(i + 1).getPreviousBlockHash())) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public String toString() {
            return "Blockchain{" +
                    "blockchain=" + blockchain +
                    '}';
        }
    }

    class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException("Hashing error", e);
            }
        }

        /* Applies Sha256 to a Block and returns a hash. */
        public static String applySha256(Block block) {
            try {
                StringBuilder sb = new StringBuilder();
                sb.append(block.getId());
                sb.append(block.getTimestamp());
                sb.append(block.getPreviousBlockHash());
                sb.append(block.getMagicNumber());
                String input = sb.toString();
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException("Hashing error", e);
            }
        }
    }

    public class Main {
        public static void main(String[] args) {

            System.out.println("Enter how many zeros the hash must start with: ");
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt();

            Blockchain blockchain = new Blockchain(n);
            for (int i = 0; i < 5; i++) {
                System.out.println(blockchain.addBlock());
            }
        }
    }

  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/50/stages/273/implement
status: Unchecked
record: -1
